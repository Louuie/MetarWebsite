{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/MetarWebsite/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Home from './components/Home/Home.tsx';\nimport Metar from './components/Airport/Metar.tsx';\nimport Login from './components/Login/Login.tsx';\nimport User from './components/User/User.tsx';\nimport { useGoogleLogin } from 'react-google-login';\nimport { useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport Airport from './components/Airport/Airport.tsx'; // TODO - Figure out a way to store this clientID in an env file\n// The Way to complete this would be too store the API key in the backend server and make a request to grab that API key\n// I would prefer if this is done, by passing some password in the headers than checking that in the backend server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst clientId = \"817352508433-svhmh1kd4bg80l1jb10g9kq91qkvslv6.apps.googleusercontent.com\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setLoginStatus] = useState(false);\n  const [userName, setUserName] = useState(null);\n  const [userEmail, setUserEmail] = useState(null);\n  const [userImageUrl, setUserImageUrl] = useState(null);\n\n  const onLoginSuccess = res => {\n    if (res.profileObj) {\n      setLoginStatus(true);\n      setUserName(res.profileObj.name);\n      setUserEmail(res.profileObj.email);\n      setUserImageUrl(res.profileObj.imageUrl);\n    } else {\n      setLoginStatus(false);\n    }\n  };\n\n  const onLoginFailure = res => {\n    console.log(res);\n  };\n\n  const {\n    signIn,\n    loaded\n  } = useGoogleLogin({\n    onSuccess: onLoginSuccess,\n    onFailure: onLoginFailure,\n    isSignedIn: true,\n    clientId: clientId\n  });\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          isSignedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/user\",\n        element: /*#__PURE__*/_jsxDEV(User, {\n          isSignedIn: isLoggedIn,\n          fullName: userName,\n          email: userEmail,\n          imageUrl: userImageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/metar/:airport\",\n        element: /*#__PURE__*/_jsxDEV(Metar, {\n          isSignedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/:airport\",\n        element: /*#__PURE__*/_jsxDEV(Airport, {\n          isSignedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"NjGUvTaGFB4gyOoFNsRjoHLQb2s=\", false, function () {\n  return [useGoogleLogin];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/elias/Desktop/MetarWebsite/frontend/src/App.tsx"],"names":["Home","Metar","Login","User","useGoogleLogin","useState","Routes","Route","Airport","clientId","App","isLoggedIn","setLoginStatus","userName","setUserName","userEmail","setUserEmail","userImageUrl","setUserImageUrl","onLoginSuccess","res","profileObj","name","email","imageUrl","onLoginFailure","console","log","signIn","loaded","onSuccess","onFailure","isSignedIn"],"mappings":"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","sourcesContent":["import Home from './components/Home/Home.tsx';\nimport Metar from './components/Airport/Metar.tsx'\nimport Login from './components/Login/Login.tsx'\nimport User from './components/User/User.tsx';\nimport { useGoogleLogin } from 'react-google-login';\nimport { useEffect, useState } from 'react';\nimport {Routes, Route } from 'react-router-dom';\nimport env from \"dotenv\";\nimport './App.css';\nimport Airport from './components/Airport/Airport.tsx';\n\n// TODO - Figure out a way to store this clientID in an env file\n        // The Way to complete this would be too store the API key in the backend server and make a request to grab that API key\n        // I would prefer if this is done, by passing some password in the headers than checking that in the backend server\nconst clientId = \"817352508433-svhmh1kd4bg80l1jb10g9kq91qkvslv6.apps.googleusercontent.com\";\n\nfunction App() {\n  const [isLoggedIn, setLoginStatus] = useState(false);\n  const [userName, setUserName] = useState<any | null>(null);\n  const [userEmail, setUserEmail] = useState<any | null>(null);\n  const [userImageUrl, setUserImageUrl] = useState<any | null>(null);\n\n  const onLoginSuccess = (res) => {\n      if(res.profileObj) {\n          setLoginStatus(true);\n          setUserName(res.profileObj.name);\n          setUserEmail(res.profileObj.email);\n          setUserImageUrl(res.profileObj.imageUrl);\n      } else { setLoginStatus(false); }\n  };\n  \n  const onLoginFailure = (res) => {\n      console.log(res);\n  };\n\n  const { signIn, loaded } = useGoogleLogin({\n      onSuccess: onLoginSuccess,\n      onFailure: onLoginFailure,\n      isSignedIn: true,\n      clientId: clientId\n  });\n\n  return (\n      <Routes>\n            <>\n                <Route path=\"/\" element={<Home isSignedIn={isLoggedIn}/>} />\n                <Route path=\"/user\" element={<User isSignedIn={isLoggedIn} fullName={userName} email={userEmail} imageUrl={userImageUrl} />} />\n                <Route path=\"/login\" element={<Login />} />\n                <Route path=\"/metar/:airport\" element={<Metar isSignedIn={isLoggedIn} />} />\n                <Route path=\"/:airport\" element={<Airport isSignedIn={isLoggedIn} />} />\n            </>\n      </Routes>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}