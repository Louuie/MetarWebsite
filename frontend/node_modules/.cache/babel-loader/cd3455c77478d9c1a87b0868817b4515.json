{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Desktop/Desktop - Elias\\u2019s MacBook Pro/MetarWebsite/frontend/src/components/Airport/Metar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport lodash from 'lodash';\nimport { useParams, Link } from 'react-router-dom';\nimport './Metar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Metar() {\n  _s();\n\n  let params = useParams();\n  let padded_wind_direction;\n  let [isLoading, setIsLoading] = useState(true);\n  let [icao_code, set_icao_code] = useState(params.airport);\n  let [airportName, setAirportName] = useState(null);\n  let [airportLocation, setAirportLocation] = useState(null);\n  let [airport_raw_text, set_airport_raw_text] = useState(null);\n  let [airport_temperature_in_celsius, set_airport_temperature_in_celsius] = useState(null);\n  let [airport_temperature_in_fahrenheit, set_airport_temperature_in_fahrenheit] = useState(null);\n  let [flight_category, set_flight_category] = useState(null);\n  let [wind_direction, set_wind_direction] = useState(null);\n  let [wind_speed, set_wind_speed] = useState(null);\n\n  const fetchData = async () => {\n    const res = await axios.get(`http://localhost:4000/metar?icao=${icao_code}`);\n    const data = await res.data;\n    set_icao_code(data.icao);\n    setAirportName(data.station.name);\n    setAirportLocation(data.station.location);\n    set_airport_raw_text(data.raw_text);\n    set_flight_category(data.flight_category);\n\n    if (data.temperature.celsius === undefined && data.temperature.fahrenheit === undefined) {\n      set_airport_temperature_in_celsius(data.temperature.minimum.celsius);\n      set_airport_temperature_in_fahrenheit(data.temperature.minimum.fahrenheit);\n    } else {\n      set_airport_temperature_in_celsius(data.temperature.celsius);\n      set_airport_temperature_in_fahrenheit(data.temperature.fahrenheit);\n    }\n\n    if (data.wind.degrees >= 100) {\n      set_wind_direction(data.wind.degrees);\n    } else {\n      padded_wind_direction = data.wind.degrees.toString();\n      set_wind_direction(padded_wind_direction.padStart(3, '0'));\n    }\n\n    set_wind_speed(data.wind.speed_kts);\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 5000);\n  };\n\n  useEffect(() => {\n    fetchData(); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: lodash.isEmpty(icao_code) ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"That airport does not exist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/${icao_code}`,\n            children: icao_code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 70\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/metar/${icao_code}`,\n            onClick: () => window.location.reload(),\n            children: \"Metar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: icao_code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: airportName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: airportLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metarTitle\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"METAR - Current\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metarTable\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table\",\n              children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"th\", {\n                    colSpan: 2,\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: airport_raw_text\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Flight Category\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"badge text-white\",\n                      children: flight_category\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 37\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Wind\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [wind_direction, \"\\xB0 at \", wind_speed, \" KTS\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Temperature\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [airport_temperature_in_celsius, \"\\xB0 C / \", airport_temperature_in_fahrenheit, \"\\xB0 F\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(Metar, \"FAzGZuOb+qoVedzZO7W7Ml6TFcs=\", false, function () {\n  return [useParams];\n});\n\n_c = Metar;\nexport default Metar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Metar\");","map":{"version":3,"sources":["/Users/elias/Desktop/Desktop - Elias’s MacBook Pro/MetarWebsite/frontend/src/components/Airport/Metar.jsx"],"names":["React","useEffect","useState","axios","lodash","useParams","Link","Metar","params","padded_wind_direction","isLoading","setIsLoading","icao_code","set_icao_code","airport","airportName","setAirportName","airportLocation","setAirportLocation","airport_raw_text","set_airport_raw_text","airport_temperature_in_celsius","set_airport_temperature_in_celsius","airport_temperature_in_fahrenheit","set_airport_temperature_in_fahrenheit","flight_category","set_flight_category","wind_direction","set_wind_direction","wind_speed","set_wind_speed","fetchData","res","get","data","icao","station","name","location","raw_text","temperature","celsius","undefined","fahrenheit","minimum","wind","degrees","toString","padStart","speed_kts","setTimeout","isEmpty","window","reload"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport axios from 'axios';\nimport lodash from 'lodash';\nimport { useParams, Link } from 'react-router-dom';\nimport './Metar.css';\n\nfunction Metar() {\n    let params = useParams();\n    let padded_wind_direction\n    let [isLoading, setIsLoading] = useState(true);\n    let [icao_code, set_icao_code] = useState(params.airport); \n    let [airportName, setAirportName] = useState(null);\n    let [airportLocation, setAirportLocation] = useState(null);\n    let [airport_raw_text, set_airport_raw_text] = useState(null);\n    let [airport_temperature_in_celsius, set_airport_temperature_in_celsius] = useState(null);\n    let [airport_temperature_in_fahrenheit, set_airport_temperature_in_fahrenheit] = useState(null);\n    let [flight_category, set_flight_category] = useState(null);\n    let [wind_direction, set_wind_direction] = useState(null);\n    let [wind_speed, set_wind_speed] = useState(null);\n\n\n    const fetchData = async () => {\n        const res = await axios.get(`http://localhost:4000/metar?icao=${icao_code}`);\n        const data = await res.data;\n        set_icao_code(data.icao)\n        setAirportName(data.station.name)\n        setAirportLocation(data.station.location)\n        set_airport_raw_text(data.raw_text);\n        set_flight_category(data.flight_category);\n        if(data.temperature.celsius === undefined && data.temperature.fahrenheit === undefined) { \n            set_airport_temperature_in_celsius(data.temperature.minimum.celsius);\n            set_airport_temperature_in_fahrenheit(data.temperature.minimum.fahrenheit);\n         } else { \n                set_airport_temperature_in_celsius(data.temperature.celsius); \n                set_airport_temperature_in_fahrenheit(data.temperature.fahrenheit); \n            }\n        if(data.wind.degrees >= 100) { set_wind_direction(data.wind.degrees); } else {\n            padded_wind_direction = data.wind.degrees.toString();\n            set_wind_direction(padded_wind_direction.padStart(3, '0'));\n        }\n        set_wind_speed(data.wind.speed_kts);\n        setTimeout(\n            function() {\n                setIsLoading(false);\n            }, 5000)\n    };\n\n\n    useEffect(() => {\n        fetchData()\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);\n    return (\n        <>\n          <main>\n              {lodash.isEmpty(icao_code) ? (\n                  <h1>That airport does not exist</h1>\n              ) : (\n                <div>\n                    <div>\n                        <Link to={`/${icao_code}`}>{icao_code}</Link><br></br>\n                        <Link to={`/metar/${icao_code}`} onClick={(() => window.location.reload())}>Metar</Link>\n                    </div>\n                <h1>{icao_code}</h1>\n                <div>\n                  <h2>{airportName}</h2>\n                  <h3>{airportLocation}</h3>\n                  </div>\n                <div>\n                    <div className=\"metarTitle\">\n                      <h3>METAR - Current</h3>\n                    </div>\n                    <div className=\"metarTable\">\n                        <table className=\"table\">\n                            <tbody>\n                                <tr>\n                                    <th colSpan={2}>\n                                        <p>{airport_raw_text}</p>\n                                    </th>\n                                </tr>\n                                <tr>\n                                    <th>Flight Category</th>\n                                    <td>\n                                    <span className=\"badge text-white\">\n                                      {flight_category}\n                                    </span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th>Wind</th>\n                                    <td>\n                                        {wind_direction}° at {wind_speed} KTS\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th>Temperature</th>\n                                    <td>\n                                        {airport_temperature_in_celsius}° C / {airport_temperature_in_fahrenheit}° F\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n          )}\n          </main>\n        </>\n    );\n}\n\n\n\nexport default Metar;\n"]},"metadata":{},"sourceType":"module"}